@using System.Drawing;
@inject Services.SliderService sliderService
@inject IJSRuntime jsRuntime
@inject ILogger<HomeSliderComponent> logger

<!-- Section Slider -->
<div class="section">
    <div class="widget-slider">
        <div class="wrapper-full">
            <!-- Slider Carousel -->
            <div class="widget-carousel owl-carousel owl-theme">
                @foreach(var item in sliderService.GetSlides())
                {
                    <div class="slider-item" style="background-image: url('@(item.ImageSource)');">
                        <div class="wrapper">
                            <div class="item-inner">
                                <h5>@item.PreHeader</h5>
                                <h1>@item.Title</h1>
                                <h2>@item.Subtitle</h2>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <!-- Slider Carousel End -->
            <!-- Slider Booking -->
            <div class="slider-booking">
                <div class="wrapper">
                    <h5>BOOK NOW YOUR HOTEL</h5>
                    <form>
                        <ul>
                            <li @onclick="ShowCheckInCalendar" id="@checkInInputName">
                                <i class="fa fa-calendar-plus-o"></i>
                                <input type="text" name="checkin" placeholder="CHECK IN" class="datepicker hasDatepicker"  required>
                            </li>
                            <li @onclick="() => DateMode = SelectDateModes.CheckOutDate">
                                <i class="fa fa-calendar-plus-o"></i>
                                <input type="text" name="checkout" placeholder="CHECK OUT" class="datepicker" required>
                            </li>
                            <li>
                                <i class="fa fa-caret-down"></i>
                                <select name="adults" required>
                                    <option value="">ADULTS</option>
                                    <option value="1">1 ADULT</option>
                                    <option value="2">2 ADULT</option>
                                    <option value="3">3 ADULT</option>
                                </select>
                            </li>
                            <li>
                                <i class="fa fa-caret-down"></i>
                                <select name="childrens" required>
                                    <option value="">CHILDRENS</option>
                                    <option value="1">1 CHILDREN</option>
                                    <option value="2">2 CHILDREN</option>
                                    <option value="3">3 CHILDREN</option>
                                </select>
                            </li>
                            <li>
                                <button type="submit" class="btn">BOOK NOW</button>
                            </li>
                        </ul>
                    </form>
                </div>
            </div>
            <!-- Slider Booking End -->
        </div>
    </div>
</div>
<!-- Section Slider End -->

<div id="ui-datepicker-div" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all" style="@calendarPosition; display: @((DateMode == SelectDateModes.None) ? "none" : "block");">
    <div class="ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all">
        <a class="ui-datepicker-prev ui-corner-all" title="Prev" @onclick="() => calendarPageDate = calendarPageDate.AddMonths(-1)">
            <span class="ui-icon ui-icon-circle-triangle-w">Prev</span>
        </a>
        <a class="ui-datepicker-next ui-corner-all" data-handler="next" @onclick="() => calendarPageDate = calendarPageDate.AddMonths(1)">
                <span class="ui-icon ui-icon-circle-triangle-e">Next</span></a>
                <div class="ui-datepicker-title">
                    <span class="ui-datepicker-month">@calendarPageDate.ToString("MMMM")</span>&nbsp;
                    <span class="ui-datepicker-year">@calendarPageDate.ToString("yyyy")</span>
                </div>
    </div>
    <table class="ui-datepicker-calendar">
        <thead>
            <tr>
                <th scope="col" class="ui-datepicker-week-start"><span title="Monday">Mo</span></th>
                <th scope="col"><span title="Tuesday">Di</span></th>
                <th scope="col"><span title="Wednesday">Mi</span></th>
                <th scope="col"><span title="Thursday">Do</span></th>
                <th scope="col"><span title="Friday">Fr</span></th>
                <th scope="col" class="ui-datepicker-week-end"><span title="Saturday">Sa</span></th>
                <th scope="col" class="ui-datepicker-week-end"><span title="Sunday">So</span></th>
            </tr>
        </thead>
        <tbody>
            
            @for (int week=1; week < weeksToRender * 7; week += 7)
            {
                <tr>
                    @for(int day=1;day <= 7; day++)
                    {
                        DateTime date = startDate.AddDays(week + day);
                        <td>
                            <a class="@GetClassForDay(date)" style="cursor: pointer" @onclick="() => SelectDate(date)">@date.Day</a>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
   

    .widget-slider {
        position: relative;
    }

        .widget-slider .widget-carousel .slider-item {
            position: relative;
            min-height: 100vh;
            padding-top: 270px;
            padding-bottom: 270px;
            text-align: center;
            background-repeat: no-repeat;
            background-position: top center;
            background-size: cover;
        }

            .widget-slider .widget-carousel .slider-item:after {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                content: "";
                display: block;
                background-color: rgba(36, 50, 74, 0.7);
            }

            .widget-slider .widget-carousel .slider-item .item-inner {
                position: relative;
                z-index: 1;
                padding-left: 70px;
                padding-right: 70px;
                color: #fff;
            }

                .widget-slider .widget-carousel .slider-item .item-inner h1 {
                    font-size: 60px;
                    margin-bottom: 20px;
                }

                .widget-slider .widget-carousel .slider-item .item-inner h2 {
                    position: relative;
                    display: inline-block;
                    font-size: 28px;
                    font-style: italic;
                    margin-bottom: 0;
                    padding-left: 20px;
                    padding-right: 20px;
                }

                    .widget-slider .widget-carousel .slider-item .item-inner h2:before,
                    .widget-slider .widget-carousel .slider-item .item-inner h2:after {
                        position: absolute;
                        top: 60%;
                        width: 10px;
                        height: 1px;
                        content: "";
                        display: inline-block;
                        background-color: #fff;
                    }

                    .widget-slider .widget-carousel .slider-item .item-inner h2:before {
                        left: 0;
                    }

                    .widget-slider .widget-carousel .slider-item .item-inner h2:after {
                        right: 0;
                    }

        .widget-slider .widget-carousel .owl-dots {
            display: none;
            position: absolute;
            left: 0;
            bottom: 40px;
            width: 100%;
            margin-top: 0;
        }

            .widget-slider .widget-carousel .owl-dots .owl-dot span {
                background-color: #fff;
            }

            .widget-slider .widget-carousel .owl-dots .owl-dot.active span,
            .widget-slider .widget-carousel .owl-dots .owl-dot:hover span {
                background-color: #d77b5d;
            }

        .widget-slider .widget-carousel .owl-nav {
            margin: 0;
        }

            .widget-slider .widget-carousel .owl-nav [class*="owl-"] {
                position: absolute;
                top: 50%;
                width: 50px;
                height: 50px;
                line-height: 50px;
                margin: -25px 0 0 0;
                padding: 0;
                border: 1px solid #fff;
                font: normal normal normal 14px/1 FontAwesome;
                text-rendering: auto;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
                color: #fff;
                opacity: 0.5;
                background: transparent;
                -webkit-border-radius: 50%;
                -moz-border-radius: 50%;
                -ms-border-radius: 50%;
                -o-border-radius: 50%;
                border-radius: 50%;
            }

                .widget-slider .widget-carousel .owl-nav [class*="owl-"]:hover {
                    opacity: 1;
                    background: transparent;
                }

            .widget-slider .widget-carousel .owl-nav .owl-prev {
                left: 60px;
            }

            .widget-slider .widget-carousel .owl-nav .owl-next {
                right: 60px;
            }

                .widget-slider .widget-carousel .owl-nav .owl-prev:before,
                .widget-slider .widget-carousel .owl-nav .owl-next:before {
                    line-height: 50px;
                }

            .widget-slider .widget-carousel .owl-nav .owl-prev:before {
                content: "\f104";
            }

            .widget-slider .widget-carousel .owl-nav .owl-next:before {
                content: "\f105";
            }

            .widget-slider .widget-carousel .owl-nav .disabled,
            .widget-slider .widget-carousel .owl-nav .disabled:hover {
                opacity: 0.5;
            }

                .widget-slider .widget-carousel .owl-nav.disabled + .owl-dots {
                    display: block;
                }

        .widget-slider .slider-booking {
            position: absolute;
            bottom: 100px;
            left: 0;
            z-index: 2;
            width: 100%;
            color: #fff;
        }

            .widget-slider .slider-booking h5 {
                font-size: 11px;
                color: #818a9c;
                text-align: center;
            }

            .widget-slider .slider-booking ul {
                width: 830px;
                padding: 20px;
                margin: 0 auto;
                background-color: rgba(129, 138, 156, 0.3);
                -webkit-box-shadow: 0px 0px 30px 0px rgba(34, 30, 24, 0.5);
                -moz-box-shadow: 0px 0px 30px 0px rgba(34, 30, 24, 0.5);
                box-shadow: 0px 0px 30px 0px rgba(34, 30, 24, 0.5);
            }

                .widget-slider .slider-booking ul li {
                    position: relative;
                    float: left;
                    width: 20%;
                    padding-right: 10px;
                    text-align: left;
                }

                    .widget-slider .slider-booking ul li select,
                    .widget-slider .slider-booking ul li input[type="text"] {
                        width: 100%;
                        height: 40px;
                        line-height: 40px;
                        padding: 0 15px;
                        text-transform: uppercase;
                        background-color: #5c677b;
                    }

                    .widget-slider .slider-booking ul li select {
                        -webkit-appearance: none;
                        -moz-appearance: none;
                        appearance: none;
                        -webkit-border-radius: 0;
                        -moz-border-radius: 0;
                        -ms-border-radius: 0;
                        -o-border-radius: 0;
                        border-radius: 0;
                    }

                        .widget-slider .slider-booking ul li select::-ms-expand {
                            display: none;
                        }

                    .widget-slider .slider-booking ul li button {
                        display: block;
                        width: 100%;
                    }

                    .widget-slider .slider-booking ul li .fa {
                        position: absolute;
                        top: 10px;
                        left: calc(100% - 40px);
                        z-index: 1;
                        width: 20px;
                        height: 20px;
                        line-height: 20px;
                        text-align: center;
                    }

                    .widget-slider .slider-booking ul li ::-webkit-input-placeholder {
                        color: #fff;
                    }

                    .widget-slider .slider-booking ul li :-moz-placeholder {
                        color: #fff;
                    }

                    .widget-slider .slider-booking ul li ::-moz-placeholder {
                        color: #fff;
                    }

                    .widget-slider .slider-booking ul li :-ms-input-placeholder {
                        color: #fff;
                    }

                    .widget-slider .slider-booking ul li:last-child {
                        padding-right: 0;
                    }

        .widget-slider.has-rooms .slider-booking {
            bottom: 120px;
        }

        .widget-slider.has-rooms .widget-carousel .owl-nav.disabled + .owl-dots {
            display: none;
        }
                                    </style>

@code {
    private const string checkInInputName = "checkInInput";

    private DateTime calendarPageDate = DateTime.Now;

    private int weeksToRender = 5;

    private DateTime? selectedStartDate = null;
    private DateTime? selectedEndDate = null;

    private string calendarPosition = "position: absolute; top: 467px; left: 308.5px; z-index: 3;";

    private class Offsets
    {
        public double OffsetLeft { get; set; }

        public double OffsetTop { get; set; }
    }

    private class WindowDimensions
    {
        public double Width { get; set; }

        public double Height { get; set; }
    }


    private async Task ShowCheckInCalendar(MouseEventArgs args)
    {
        if (DateMode != SelectDateModes.CheckInDate)
            DateMode = SelectDateModes.CheckInDate; 
        else 
            DateMode = SelectDateModes.None;

        WindowDimensions pageSize = await jsRuntime.InvokeAsync<WindowDimensions>("getWindowDimensions");
        Offsets offsets = await jsRuntime.InvokeAsync<Offsets>("getElementPosition", checkInInputName);

        logger?.LogInformation($"Page Height: {pageSize.Height}, PageY: {args.ClientY}");
        if (args.ClientY > (pageSize.Height / 2))
        {
            // render above
            calendarPosition = $"position: absolute; top: 450px; left: {offsets.OffsetLeft}px; z-index: 3;";
        }
        else
        {
            // render below
            calendarPosition = $"position: absolute; top: 800px; left: {offsets.OffsetLeft}px; z-index: 3;";
        }
    }

    private DateTime startDate
    {
        get
        {
            var firstDayOfTheMonth = new DateTime(DateTime.Now.Year, calendarPageDate.Month, 1);
            if (firstDayOfTheMonth.DayOfWeek == DayOfWeek.Sunday)
            {
                weeksToRender = 6;
                return firstDayOfTheMonth.AddDays(-(int)firstDayOfTheMonth.DayOfWeek - 8);

            }
            weeksToRender = 5;
            return firstDayOfTheMonth.AddDays(-(int)firstDayOfTheMonth.DayOfWeek - 1);
        }
    }

    private bool IsSameDay(DateTime dt1, DateTime dt2)
    {
        return dt1.Year == dt2.Year && dt1.Month == dt2.Month && dt1.Day == dt2.Day;
    }

    private void SelectDate(DateTime date)
    {
        if (DateMode == SelectDateModes.CheckInDate)
        {
            this.selectedStartDate = date;
            if (!this.selectedEndDate.HasValue)
            {
                this.DateMode = SelectDateModes.CheckOutDate;
            }
        }
        else if (DateMode == SelectDateModes.CheckOutDate)
        {
            this.selectedEndDate = date;
            this.DateMode = SelectDateModes.None;
        }
    }

    private enum SelectDateModes
    {
        None,
        CheckInDate,
        CheckOutDate
    }

    private string GetClassForDay(DateTime date)
    {
        string style = "";
        if (selectedStartDate.HasValue && IsSameDay(date, selectedStartDate.Value))
        {
            return (DateMode == SelectDateModes.CheckInDate) ? "ui-state-highlight" : "ui-state-active";

        }

        if (selectedEndDate.HasValue && IsSameDay(date, selectedEndDate.Value))
        {
            return (DateMode == SelectDateModes.CheckOutDate) ? "ui-state-highlight" : "ui-state-active";
        }

        if (date.Month != calendarPageDate.Month)
        {
            return "ui-datepicker-other-month";
        }



        return "ui-state-default";
    }

    private SelectDateModes DateMode = SelectDateModes.CheckInDate;
}